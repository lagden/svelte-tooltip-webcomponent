import { S as SvelteElement, i as init, a as attribute_to_object, b as insert_dev, f as flush, s as safe_not_equal, d as dispatch_dev, v as validate_slots, e as element, t as text, c as space, n as noop, g as attr_dev, h as add_location, j as append_dev, k as set_data_dev, l as detach_dev } from './index-2aba8e47.js';

/* src/components/A.svelte generated by Svelte v3.31.0 */

const file = "src/components/A.svelte";

function create_fragment(ctx) {
	let div;
	let h2;
	let t0;
	let t1;
	let slot;

	const block = {
		c: function create() {
			div = element("div");
			h2 = element("h2");
			t0 = text(/*exemplo*/ ctx[0]);
			t1 = space();
			slot = element("slot");
			this.c = noop;
			attr_dev(h2, "class", "_demo_title");
			add_location(h2, file, 7, 1, 124);
			add_location(slot, file, 8, 1, 164);
			attr_dev(div, "class", "_demo_base");
			add_location(div, file, 6, 0, 98);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, h2);
			append_dev(h2, t0);
			append_dev(div, t1);
			append_dev(div, slot);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*exemplo*/ 1) set_data_dev(t0, /*exemplo*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("a-element", slots, []);
	let { exemplo = "Apenas um show!!!" } = $$props;
	const writable_props = ["exemplo"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<a-element> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("exemplo" in $$props) $$invalidate(0, exemplo = $$props.exemplo);
	};

	$$self.$capture_state = () => ({ exemplo });

	$$self.$inject_state = $$props => {
		if ("exemplo" in $$props) $$invalidate(0, exemplo = $$props.exemplo);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [exemplo];
}

class A extends SvelteElement {
	constructor(options) {
		super();
		this.shadowRoot.innerHTML = `<style>:host{--bgColor:hsla(200, 100%, 50%, 0.5);--txtColor:hsla(100, 50%, 50%, 1)}._demo_base{box-sizing:border-box;padding:1em;max-width:1000px;margin:1em auto;background-color:var(--bgColor)}._demo_title{color:var(--txtColor)}</style>`;

		init(
			this,
			{
				target: this.shadowRoot,
				props: attribute_to_object(this.attributes)
			},
			instance,
			create_fragment,
			safe_not_equal,
			{ exemplo: 0 }
		);

		if (options) {
			if (options.target) {
				insert_dev(options.target, this, options.anchor);
			}

			if (options.props) {
				this.$set(options.props);
				flush();
			}
		}
	}

	static get observedAttributes() {
		return ["exemplo"];
	}

	get exemplo() {
		return this.$$.ctx[0];
	}

	set exemplo(exemplo) {
		this.$set({ exemplo });
		flush();
	}
}

customElements.define("a-element", A);

export default A;
//# sourceMappingURL=A.js.map
