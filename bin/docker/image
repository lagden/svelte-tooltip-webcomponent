#!/bin/bash

DIR="$(cd $(dirname $0) && pwd)"
BIN_DIR="$(cd $DIR/.. && pwd)"

# Import functions
. $BIN_DIR/helper/fn

usage() {
	cat <<-EOF

  Usage: $0 [options...]

  Options:
    -e <staging|production>  Environment
    -h                       Show usage

EOF
exit 0
}

# Go to current directory
CURR_FOLDER="$(pwd)"
cd $CURR_FOLDER

unset OPT
OPT="staging"

unset OPT_AVAILABLE
OPT_AVAILABLE=("staging" "production")

while getopts "e:h" o
do
	case ${o} in
		e) OPT=$OPTARG ;;
		h) usage ;;
		\?) usage ;;
	esac
done

# Check option available
[[ ! " ${OPT_AVAILABLE[*]} " =~ " ${OPT} " ]] && usage

# ENV File
load_env $OPT

# Generate ENVs for frontend application
if test "${REQUIRE_GEN:-0}" = "1"; then
	gen_env "${CURR_FOLDER}/resource/env.js"
fi

# Variables
TAG_IMAGE="${REGISTRY}/${IMAGE}:${VERSION}"
TAG_IMAGE_LATEST="${REGISTRY}/${IMAGE}:latest"
DOCKER_TARGET_BUILD="${DOCKER_TARGET_BUILD:-main}"

# Build
docker build \
	--build-arg NODE_ENV=${NODE_ENV} \
	--build-arg PM=${PM:-npm} \
	--target $DOCKER_TARGET_BUILD \
	--compress \
	--force-rm \
	--tag $TAG_IMAGE \
	--tag $TAG_IMAGE_LATEST \
	--no-cache .
	# --no-cache . 2> .docker-buid.log

test $? -ne 0 && abort "Falha no build da image --> ${TAG_IMAGE}" || ok "Build image ok --> ${TAG_IMAGE}"

# Push (Send image to Registry)
if test "${REGISTRY_GOOGLE_CLOUD:-0}" = "0"; then
	REGISTRY_USER="$(cat ${CURR_FOLDER}/.registry-user)"
	cat ${CURR_FOLDER}/.registry-passwd | docker login $REGISTRY --username $REGISTRY_USER --password-stdin
fi

if test "${OPT}" = "production"; then
	docker push $TAG_IMAGE_LATEST
fi

docker push $TAG_IMAGE

# # Cleanup
# docker rmi $(docker images -q -f "dangling=true" -f "label=autodelete=true")

ok "Build finalizado... Yeahh!!!"

exit 0
